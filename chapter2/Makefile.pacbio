#
# Pacbio genome assembly workflow
#

DATA ?= reads
SUBREADS ?= ${DATA}/subreads.bam
CCSREADS ?= ${DATA}/ccs.bam
CCS ?= ${DATA}/ccs.fq
GENOME_SIZE ?= 23m
DATA_TYPE ?= pacbio-hifi
NCPU ?= 6
MIN_PASS ?= 3
OUT ?= asm
CANU_OUT ?= ${OUT}/canu_assembly
CANU_FA ?= ${OUT}/17XNL_PSU_v1.fa
ASM_PREFIX ?= 17XNL_PSU
CANU_V2 ?= ${OUT}/17XNL_PSU_v2.fa
CANU_V3 ?= ${OUT}/17XNL_PSU_v3.fa
CANU_V4 ?= ${OUT}/17XNL_PSU_v4.fa

BAM ?= bam
CONS ?= cons
CONS_FASTA ?= ${CONS}/cons2.fa.gz
CONS_BAM ?= ${CONS}/cons2_17X_PLD.bam
CONS_PILE ?= ${CONS}/pileup.txt
ASM_IN ?=${OUT}/cons2.fa
ASSEMBLY ?= ${OUT}/17XNL_PSU.fa

REF ?= refs/Py17X_Genome.fasta
SRC ?= src/pacbio_asm

V2_BAM =${BAM}/$(notdir $(basename ${CANU_V2})).bam


# Makefile customizations.
.RECIPEPREFIX = >
.DELETE_ON_ERROR:
.ONESHELL:
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Print usage information.
usage::
> @echo "#"
> @echo "# Makefile.pacbio.mk: Create Pacbio genome assembly with canu"
> @echo "#"
> @echo "# make canu_final READS=${DATA} GENOME_SIZE=${GENOME_SIZE} REF=${REF}"
> @echo "#"
> @echo "# READS : Data folder with pacbio subreads"
> @echo "# GENOME_SIZE : Estimated genome size"
> @echo "# REF: Reference genome"
> @echo "# "
> @echo "# The final output is selected contigs based on reference alignment."
> @echo "#"

# Generate ccs reads
${CCS}:${SUBREADS}
>ccs --num-threads ${NCPU} --min-passes ${MIN_PASS} ${SUBREADS} ${CCSREADS}
>samtools fastq ${CCSREADS} >${CCS}

#Make genome assembly with canu assembler
${CANU_FA}:${CCS}
>canu -p pacbio_canu genomeSize=23m -${DATA_TYPE} ${CCS} -d ${CANU_OUT}
>cp ${CANU_OUT}/pacbio_canu.contigs.fasta ${CANU_FA} 

# Assign names based on reference alignment
${CANU_V2}:${CANU_FA} ${REF}
# Extract primary aligned contigs that has a aligned region% >CUTOFF
>bash ${SRC}/assign.sh ${CANU_FA} ${REF} ${ASM_PREFIX} >${OUT}/17XNL_PSU_coverages.txt 
>cat ${OUT}/17XNL_PSU_coverages.txt |cut -f 1 >${OUT}/selected_contigs.txt
# Modify chromosome names.
>seqtk subseq -l 60 ${CANU_FA} ${OUT}/selected_contigs.txt >${OUT}/selected_contigs.fa
#>samtools faidx ${CANU_FA} -r ${OUT}/selected_contigs.txt >${OUT}/selected_contigs.fa
>python ${SRC}/modify_header.py ${OUT}/selected_contigs.fa ${OUT}/17XNL_PSU_coverages.txt |seqtk seq -A -l 60 > ${OUT}/17XNL_PSU_v2.fa
>samtools faidx ${OUT}/17XNL_PSU_v2.fa

ccs:${CCS}
>ls -l ${CCS}

canu_asm:${CANU_FA}
>ls -l ${CANU_FA}

canu_final:${CANU_V2}
>ls -l ${CANU_V2}


#
# Below are the commands for additional modifications to the assembly.
# Some of the steps required manual intervention and checking.
#

# Reverse the contigs
reverse_contigs:
>mkdir -p ${BAM}
>make -f Makefile.common minimap2_asm INPUT=${CANU_V2} OUTPUT=${V2_BAM} 
>samtools view -F 4 -f 16 ${V2_BAM} |cut -f 1 |sort| uniq >${OUT}/contigs_rev.txt
>samtools view -F 4 -F 16 ${V2_BAM} |cut -f 1 |sort| uniq >${OUT}/contigs_fwd.txt
# Check manually if some of the contigs to be reversed are also aligned in fwd and 
# correct the fwd and reverse txt files accordingly.
>seqtk subseq -l 60 ${CANU_V2} ${OUT}/contigs_fwd.txt >${OUT}/contigs_fwd.fa
>seqtk subseq -l 60 ${CANU_V2} ${OUT}/contigs_rev.txt >${OUT}/tmp.fa
>revseq -sequence ${OUT}/tmp.fa -outseq ${OUT}/contigs_rev.fa
>cat ${OUT}/contigs_fwd.fa ${OUT}/contigs_rev.fa >${OUT}/combined.fa
>cat ${CANU_V2}.fai |cut -f 1 >${OUT}/list.txt
>seqtk subseq -l 60 ${CANU_V2} ${OUT}/list.txt >${OUT}/tmp.fa
>samtools faidx ${OUT}//combined.fa -r ${OUT}/list.txt >${CANU_V3}
>samtools faidx ${CANU_V3}

# Circularization of API and keep one copy of MIT
api_mit_mod:
>bash ${SRC}/circularize.sh
>bash ${SRC}/rearrange.sh
>bash ${SRC}/mt_correct.sh

# Generate consensus
>make -f Makefile.common cons GENOME=${REF} ASM_DENOVO=${CANU_V4} CONS_FASTA=${CONS_FASTA} CONS_PILE=${CONS_PILE} CONS_BAM=${CONS_BAM}

# Genome soft masked for repeats with Tantan
>make -f Makefile.commom mask_genome ASM_IN=${ASM_IN} ASSEMBLY=${ASSEMBLY}


